buildscript {
    ext.kotlin_version = '1.3.31'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'application'
mainClassName = 'app.learndesk'
def versionObj = new Version(major: 0, minor: 0, revision: 1)

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'kotlin'

allprojects {
    group 'app.learndesk'
    version versionObj.toString()
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
    maven { url "https://dl.bintray.com/kotlin/ktor" }
}

dependencies {
    implementation 'io.vertx:vertx-web:3.7.0'

    implementation 'io.sentry:sentry-logback:1.7.9'
    implementation 'ch.qos.logback:logback-classic:1.2.3'

    implementation 'io.lettuce:lettuce-core:5.1.6.RELEASE'
    implementation 'org.mongodb:mongo-java-driver:3.8.2'
    implementation 'io.github.cdimascio:java-dotenv:3.1.2'
    implementation 'org.javadelight:delight-metrics:0.0.6'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

import org.apache.tools.ant.filters.ReplaceTokens

//noinspection GroovyAssignabilityCheck
task sourcesForRelease(type: Copy) {
    outputs.upToDateWhen { false }

    from('src/main/kotlin') {
        include '**/Version.java'
        filter(ReplaceTokens, tokens: [
                VERSION_MAJOR   : versionObj.major,
                VERSION_MINOR   : versionObj.minor,
                VERSION_REVISION: versionObj.revision,
                COMMIT          : getCommitHash(),
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

//noinspection GroovyAssignabilityCheck
task generateJavaSources(type: SourceTask) {
    outputs.upToDateWhen { false }

    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'Version.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    outputs.upToDateWhen { false }

    source = generateJavaSources.source
    dependsOn generateJavaSources
}

shadowJar {
    version = versionObj.toString()
}

class Version {
    String major, minor, revision

    String toString() {
        "$major.$minor.$revision"
    }
}

static def getCommitHash() {
    def p = Runtime.getRuntime().exec("git rev-parse HEAD")
    p.waitFor()
    p.getIn().text.trim()
}
